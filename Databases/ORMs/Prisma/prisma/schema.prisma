// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/*
Why We Need friendships and friends in User?
friendships → Friendships where the user is the one who added the friend.
friends → Friendships where the user was added as a friend by someone else.
This ensures bidirectional querying.
*/
model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  joinedAt    DateTime     @default(now())
  // Friendships where this user is the one who sent the friend request
  friendships Friendship[] @relation("UserAsFriendshipCreator")
  // Friendships where this user is the one who received the friend request
  friends     Friendship[] @relation("UserAsFriend")
  jobTitleId  Int?
  jobTitle    JobTitle?    @relation("UserJobTitles", fields: [jobTitleId], references: [id])
  profile     Profile?
  posts       Post[]

  @@unique([name, email])
  @@index([id, email])
  @@map("users")
}

/*
In a friendship system, every relationship is between two users. In Prisma, we represent this using a Friendship model that links two User records.
Now, the main issue is that a friendship is always bidirectional:
If Alice adds Bob, Bob is also Alice’s friend.
However, in a database, this has to be stored as one row to avoid duplicates.
*/
model Friendship {
  id       Int    @id @default(autoincrement())
  userId   String
  friendId String
  //user who sent the friend request
  user     User   @relation("UserAsFriendshipCreator", fields: [userId], references: [id])
  //user who received the friend request
  friend   User   @relation("UserAsFriend", fields: [friendId], references: [id])

  @@unique([userId, friendId]) // Ensures a user cannot be friends with the same person multiple times
}



model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  userId String @unique //unique is needed for one to one relationship
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int        @id @default(autoincrement())
  authorId   String     @default(uuid())
  title      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  categories Category[]
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model JobTitle {
  id    Int    @id @default(autoincrement())
  name  String
  type  String
  users User[] @relation("UserJobTitles")
}



//multi field relations
// model User {
//   firstName String
//   lastName  String
//   profile   Profile?

//   @@id([firstName, lastName]) // Composite primary key
// }

// model Profile {
//   id            Int    @id
//   userFirstName String
//   userLastName  String
//   user          User   @relation(fields: [userFirstName, userLastName], references: [firstName, lastName])

//   @@unique([userFirstName, userLastName]) // Unique constraint used for one-to-one relationship
// }
